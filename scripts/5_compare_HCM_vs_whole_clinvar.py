#-----------------------------------------------
#   HCM benchmark (2022)       
#   Author: Pedro Barbosa
#
#   Script to compare ranks between 
#   analysis of HCM vs Whole clinvar
#-----------------------------------------------
import argparse
import pandas as pd
from scipy.stats import wilcoxon

def compare_ranks(df: pd.DataFrame):
    print(wilcoxon(df.d1, df.d2, alternative='greater'))

def process_hcm_files(files, metric):
       
    dfs = []
    for i, f in enumerate(files):
        _df = pd.read_csv(f, sep="\t")
        _df['dataset'] = i
        dfs.append(_df)
    
    df = pd.concat(dfs).reset_index()

    n_variants = df.total.unique().sum()
    
    sf = df.groupby('dataset').apply(lambda x: x.iloc[0].total / n_variants).to_dict()

    df['scaling_factor'] = df['dataset'].map(sf)
    df[metric] = df[metric] * df.scaling_factor
    df = df[['tool', 'dataset'] + [metric]].copy()
    

    ranked = df.groupby('tool')[metric].sum().sort_values(ascending=False)
    return ranked

def combine_datasets(hcm_df: pd.DataFrame, clinvar_file: str, metric: str):

    clinvar = pd.read_csv(clinvar_file, sep="\t")[['tool', metric]].set_index('tool')
    df = pd.concat([hcm_df, clinvar], axis=1).dropna()
    df.columns = ['d1', 'd2']
    return df 

def main():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--metrics_hcm', metavar="", required=True, nargs='+', help='Statistics file generated by a VETA on HCM circularity datasets')
    parser.add_argument('--metrics_whole_clinvar', metavar="", required=True, help='Statistics file generated by a VETA on whole clinvar.')
    parser.add_argument('--ranking_metric', metavar="", default='weighted_norm_mcc', choices=['weighted_F1', 'weighted_accuracy', 'weighted_norm_mcc', 'norm_mcc', 'precision', 'auROC', 'pr_auROC'])

    args = parser.parse_args()

    hcm_processed = process_hcm_files(args.metrics_hcm, args.ranking_metric)
    df = combine_datasets(hcm_processed, args.metrics_whole_clinvar, args.ranking_metric)
    compare_ranks(df)

    
if __name__ == "__main__":
    main()
